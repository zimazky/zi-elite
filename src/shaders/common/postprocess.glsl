#define POSTPROC_MODULE

// ----------------------------------------------------------------------------
// Модуль определения функций постобработки
// ----------------------------------------------------------------------------

/**
 * Преобразование в линейное цветовое пространство из sRGB
 */
vec3 eotf(vec3 arg) {	return pow(arg, vec3(2.2)); }

/**
 * Преобразование в sRGB из линейного цветового пространства
 */
vec3 oetf(vec3 arg) {	return pow(arg, vec3(1./2.2)); }

// Матрица преобразования цветового пространства из базиса (615,535,445) в sRGB
mat3 mat2sRGB = mat3(
   1.6218, -0.4493,  0.0325,
  -0.0374,  1.0598, -0.0742,
  -0.0283, -0.1119,  1.0491
);

/**
 * Квантование цвета и дитеринг (добавление шума, чтобы не было резких переходов между квантами цвета)
 * quant = 1./255.
 */
vec3 quantize_and_dither(vec3 col, float quant, vec2 fcoord) {
	vec3 noise = .5/65536. +
    texelFetch( uTextureBlueNoise, ivec2( fcoord / 8. ) & ( 1024 - 1 ), 0 ).xyz * 255./65536. +
    texelFetch( uTextureBlueNoise, ivec2( fcoord )		 & ( 1024 - 1 ), 0 ).xyz * 255./256.;
	vec3 c0 = floor( oetf( col ) / quant ) * quant;
	vec3 c1 = c0 + quant;
	vec3 discr = mix( eotf( c0 ), eotf( c1 ), noise );
	return mix( c0, c1, lessThan( discr, col ) );
}

/** 
 * Преобразование в sRGB из линейного пространства
 * На входе и выходе значения в диапазоне [0, 1]
 */
vec3 toSRGB(vec3 c) {
  float r = c.r > 0.0031308 ? 1.055*pow(c.r, 1./2.4) - 0.055 : c.r * 12.92;
  float g = c.g > 0.0031308 ? 1.055*pow(c.g, 1./2.4) - 0.055 : c.g * 12.92;
  float b = c.b > 0.0031308 ? 1.055*pow(c.b, 1./2.4) - 0.055 : c.b * 12.92;
  return vec3(r, g, b);
}

/** 
 * Преобразование в линейное пространство из sRGB
 * На входе и выходе значения в диапазоне [0, 1]
 */
vec3 fromSRGB(vec3 c) {
  float r = c.r > 0.04045 ? pow((c.r+0.055)/1.055, 2.4) : c.r / 12.92;
  float g = c.g > 0.04045 ? pow((c.g+0.055)/1.055, 2.4) : c.g / 12.92;
  float b = c.b > 0.04045 ? pow((c.b+0.055)/1.055, 2.4) : c.b / 12.92;
  return vec3(r, g, b);
}